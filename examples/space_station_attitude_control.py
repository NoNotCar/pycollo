"""
Space Station Attitude Control

Example 6.11 from Betts, p293 - 298.

"""

import numpy as np
import pycollo
import sympy as sym

# Symbol creation
J_00, J_01, J_02, J_10, J_11, J_12, J_20, J_21, J_22 = sym.symbols("J_00 J_01 J_02 J_10 J_11 J_12 J_20 J_21 J_22")
J_inv_00, J_inv_01, J_inv_02, J_inv_10, J_inv_11, J_inv_12, J_inv_20, J_inv_21, J_inv_22 = sym.symbols("J_inv_00 J_inv_01 J_inv_02 J_inv_10 J_inv_11 J_inv_12 J_inv_20 J_inv_21 J_inv_22")
omega_x, omega_y, omega_z = sym.symbols("omega_x omega_y omega_z")
r_x, r_y, r_z = sym.symbols("r_x r_y r_z")
h_x, h_y, h_z = sym.symbols("h_x h_y h_z")
u_x, u_y, u_z = sym.symbols("u_x u_y u_z")

domega_x_dt, domega_y_dt, domega_z_dt = sym.symbols("domega_x_dt domega_y_dt domega_z_dt")
dr_x_dt, dr_y_dt, dr_z_dt = sym.symbols("dr_x_dt dr_y_dt dr_z_dt")
dh_x_dt, dh_y_dt, dh_z_dt = sym.symbols("dh_x_dt dh_y_dt dh_z_dt")

domega_x_dt_tF, domega_y_dt_tF, domega_z_dt_tF = sym.symbols("domega_x_dt_tF domega_y_dt_tF domega_z_dt_tF")
dr_x_dt_tF, dr_y_dt_tF, dr_z_dt_tF = sym.symbols("dr_x_dt_tF dr_y_dt_tF dr_z_dt_tF")

omega_orb, h_max = sym.symbols("omega_orb h_max")

h_inner_prod_squared, u_inner_prod_squared = sym.symbols("h_inner_prod_squared u_inner_prod_squared")

# Auxiliary information
t0 = 0
tF = 1800
omega_x_t0 = -9.5380685844896e-6
omega_y_t0 = -1.1363312657036e-3
omega_z_t0 = 5.3472801108427e-6
r_x_t0 = 2.9963689649816e-3
r_y_t0 = 1.5334477761054e-1
r_z_t0 = 3.8359805613992e-3
h_x_t0 = 5000
h_y_t0 = 5000
h_z_t0 = 5000
h_x_tF = 0
h_y_tF = 0
h_z_tF = 0

# Optimal control problem definition
problem = pycollo.OptimalControlProblem(name="Space Station Attitude Control")
phase = problem.new_phase(name="A",
                          state_variables=[omega_x,
                                           omega_y,
                                           omega_z,
                                           r_x,
                                           r_y,
                                           r_z,
                                           h_x,
                                           h_y,
                                           h_z],
                          control_variables=[u_x, u_y, u_z])

phase.state_equations = {
    omega_x: domega_x_dt,
    omega_y: domega_y_dt,
    omega_z: domega_z_dt,
    r_x: dr_x_dt,
    r_y: dr_y_dt,
    r_z: dr_z_dt,
    h_x: dh_x_dt,
    h_y: dh_y_dt,
    h_z: dh_z_dt,
}
phase.path_constraints = [h_inner_prod_squared]
phase.integrand_functions = [1e-6 * u_inner_prod_squared]

phase.bounds.initial_time = t0
phase.bounds.final_time = tF
phase.bounds.state_variables = {
    omega_x: [-2e-3, 2e-3],
    omega_y: [-2e-3, 2e-3],
    omega_z: [-2e-3, 2e-3],
    r_x: [-1, 1],
    r_y: [-1, 1],
    r_z: [-1, 1],
    h_x: [-15000, 15000],
    h_y: [-15000, 15000],
    h_z: [-15000, 15000],
}
phase.bounds.initial_state_constraints = {
    omega_x: omega_x_t0,
    omega_y: omega_y_t0,
    omega_z: omega_z_t0,
    r_x: r_x_t0,
    r_y: r_y_t0,
    r_z: r_z_t0,
    h_x: h_x_t0,
    h_y: h_y_t0,
    h_z: h_z_t0,
}
phase.bounds.final_state_constraints = {
    h_x: h_x_tF,
    h_y: h_y_tF,
    h_z: h_z_tF,
}
phase.bounds.control_variables = {
    u_x: [-150, 150],
    u_y: [-150, 150],
    u_z: [-150, 150],
}
phase.bounds.integral_variables = [[0, 10]]
phase.bounds.path_constraints = [[0, h_max**2]]

problem.bounds.endpoint_constraints = [
    [0, 0], 
    [0, 0], 
    [0, 0], 
    [0, 0], 
    [0, 0], 
    [0, 0],
]

phase.guess.time = 1.0e+03 * np.array([0, 0.013149779162447, 0.041537904834590, 0.079439126621121, 0.119342755749392, 0.153345852059673, 0.174723043111239, 0.180000000000000, 0.190127260896646, 0.212443324512641, 0.243472449080371, 0.278487652739500, 0.312157831898774, 0.339357770431037, 0.355953710441032, 0.360000000000000, 0.373149779162447, 0.401537904834590, 0.439439126621121, 0.479342755749392, 0.513345852059673, 0.534723043111239, 0.540000000000000, 0.553149779162447, 0.581537904834590, 0.619439126621121, 0.659342755749392, 0.693345852059673, 0.714723043111239, 0.720000000000000, 0.733149779162447, 0.761537904834590, 0.799439126621121, 0.839342755749392, 0.873345852059673, 0.894723043111239, 0.900000000000000, 0.913149779162447, 0.941537904834590, 0.979439126621121, 1.019342755749392, 1.053345852059673, 1.074723043111239, 1.080000000000000, 1.093149779162446, 1.121537904834590, 1.159439126621121, 1.199342755749392, 1.233345852059673, 1.254723043111239, 1.260000000000000, 1.273149779162446, 1.301537904834590, 1.339439126621121, 1.379342755749392, 1.413345852059673, 1.434723043111239, 1.440000000000000, 1.453149779162447, 1.481537904834590, 1.519439126621121, 1.559342755749392, 1.593345852059673, 1.614723043111239, 1.620000000000000, 1.633149779162447, 1.661537904834590, 1.699439126621121, 1.739342755749392, 1.773345852059673, 1.794723043111239, 1.800000000000000])
# phase.guess.time = np.array([t0, tF])
phase.guess.state_variables = np.array([
    1.0e-03 * np.array([-0.009538068584490, 0.072078172225068, 0.225015596547988, 0.381895724425444, 0.492571705767531, 0.546366770163766, 0.562607207201968, 0.564644386237665, 0.566430073011729, 0.562920370546366, 0.550763733916985, 0.528211373596623, 0.498531496791831, 0.466572690466198, 0.442099711334819, 0.435558730835549, 0.412892661689766, 0.357227129319529, 0.271044170936236, 0.169592515177135, 0.077660509175347, 0.018494939807346, 0.003814982373757,-0.032799629623178,-0.111475479613312,-0.213892465027005,-0.315632308298520,-0.395169285707508,-0.440981642229320,-0.451735082338460,-0.477515888914927,-0.527881997874433,-0.582822991656340,-0.623811606162101,-0.644590435674177,-0.652979109822869,-0.654736230989299,-0.658583958948048,-0.664329740121179,-0.666611716499674,-0.662369509799947,-0.653300369077575,-0.642385317215690,-0.638857781981613,-0.628644572163163,-0.599835333124761,-0.547950278315208,-0.478653543584843,-0.409633601780853,-0.362405486383064,-0.350361541759581,-0.319767607416320,-0.251386127168594,-0.156981909298384,-0.056995124674972, 0.025784318727676, 0.075476437286428, 0.087370346570184, 0.116260346222042, 0.174368505199897, 0.240627109425223, 0.292676804763148, 0.319545521077320, 0.326956120311470, 0.327566604072805, 0.326885633706526, 0.314123366029546, 0.271008229313255, 0.190230269388868, 0.090255486242356, 0.011813174649487,-0.009466793093285]),
    1.0e+00 * np.array([-0.001136331265704, -0.001139307816083, -0.001144483294674, -0.001148836387770, -0.001150345346335, -0.001149205274763, -0.001147389082251, -0.001146815103471, -0.001145575742971, -0.001142597044115, -0.001139434526478, -0.001137075611338, -0.001135845409664, -0.001135012507019, -0.001134233758496, -0.001134007366868, -0.001133192684300, -0.001131078510241, -0.001127758715347, -0.001124049982664, -0.001121013397322, -0.001119259369331, -0.001118850660367, -0.001117879323366, -0.001116035161651, -0.001114164517208, -0.001112941873082, -0.001112452285361, -0.001112362089081, -0.001112361443132, -0.001112391716062, -0.001112577336548, -0.001112954361140, -0.001113285768330, -0.001113365762023, -0.001113376946976, -0.001113382609055, -0.001113395472678, -0.001113386344564, -0.001113188236369, -0.001112574052652, -0.001111604882438, -0.001110764522761, -0.001110530528581, -0.001109905001082, -0.001108359625465, -0.001105954216505, -0.001103163421108, -0.001100747768178, -0.001099286648491, -0.001098938575924, -0.001098099305758, -0.001096459179558, -0.001094750955507, -0.001093705237340, -0.001093517262411, -0.001093751054643, -0.001093851192377, -0.001094173762065, -0.001095221793611, -0.001097344324376, -0.001100411893512, -0.001103645713077, -0.001105954790461, -0.001106557034793, -0.001108113470333, -0.001111750062610, -0.001117237749484, -0.001123922767995, -0.001130505350948, -0.001135129257326, -0.001136333138338]),
    1.0e-03 * np.array([0.005347280110843, 0.031053207149345, 0.084958560277373, 0.152274031665581, 0.215527972751864, 0.261902014648741, 0.287053603227517, 0.292757196896029, 0.303120954099494, 0.323770335718503, 0.349998332490514, 0.376304486558994, 0.398297288541424, 0.412635003158311, 0.419163913031067, 0.420482916476178, 0.424051226948578, 0.428033575142596, 0.425659887475715, 0.414183710333666, 0.397703505315580, 0.384451130198341, 0.380858217523342, 0.371377232529321, 0.348498407386534, 0.313411795344664, 0.271904077779545, 0.233779468627506, 0.208909591744878, 0.202694214638382, 0.187109711651214, 0.153208467630680, 0.108143717389336, 0.062241571568506, 0.025311675822032, 0.002855631440766,-0.002654949632933,-0.016323620631414,-0.045495183360496,-0.083595250934423,-0.122422164636624,-0.154220047159710,-0.172495932054120,-0.176698471595626,-0.186614197684132,-0.205166588865021,-0.223536330875244,-0.234607549017523,-0.237218450966465,-0.235664650940850,-0.234907127705664,-0.232385130253249,-0.223929644011568,-0.206586047502079,-0.181642139594043,-0.155859776489450,-0.137950785064669,-0.133365143941672,-0.121699860624804,-0.095638400875077,-0.060076176105136,-0.023710628769461, 0.004485519339261, 0.020052696170849, 0.023571100500215, 0.031700095139718, 0.045668503931435, 0.054910307134565, 0.049929244012631, 0.031010687652317, 0.011046015969427, 0.005068739149029]),
    1.0e+00 * np.array([0.002996368964982, 0.003281721629777, 0.005684151597290, 0.012066614384977, 0.021717527499272, 0.031523547765642, 0.038138688645234, 0.039804120097679, 0.043023141733310, 0.050163661265857, 0.060093027164503, 0.071164616076046, 0.081532272938815, 0.089601097126771, 0.094330276011417, 0.095456277768462, 0.099031988586494, 0.106258881024131, 0.114662796821748, 0.121707644509577, 0.126082865685009, 0.128020406144403, 0.128399789874195, 0.129173185355376, 0.130001489113559, 0.129321104065405, 0.126456557957705, 0.122372833311137, 0.119086225151813, 0.118194454069820, 0.115839882072654, 0.110151683658825, 0.101422715492576, 0.091111647518072, 0.081680598721493, 0.075543672495757, 0.074008143074673, 0.070150480349931, 0.061686870878776, 0.050163251989977, 0.037865460337335, 0.027342143742803, 0.020757198067592, 0.019143638577042, 0.015150698091597, 0.006727144736230,-0.003909392459879,-0.014061433761997,-0.021642893729986,-0.025828326242037,-0.026787429974956,-0.029044831478113,-0.033248122987577,-0.037362059257214,-0.039773544438370,-0.040266501210296,-0.039857878088756,-0.039674167447818,-0.039077553215546,-0.037141882787592,-0.033303941633596,-0.027983155286075,-0.022703264966587,-0.019172398034612,-0.018287591885516,-0.016074531103467,-0.011346240479062,-0.005486763850640,-0.000511939784409, 0.002163045905084, 0.002847096246645, 0.002876564438427]),
    1.0e+00 * np.array([0.153344777610540, 0.153335510324807, 0.153260406422613, 0.153073491884596, 0.152815130204449, 0.152579053374630, 0.152435117786177, 0.152400943959901, 0.152337335527396, 0.152208146152810, 0.152041939128829, 0.151843121518082, 0.151611991703118, 0.151381688127032, 0.151221590697138, 0.151180451121183, 0.151041635224880, 0.150717386386072, 0.150241223173052, 0.149700568312889, 0.149219369809339, 0.148911557663192, 0.148835266819882, 0.148644982814653, 0.148235361597774, 0.147698105682084, 0.147155863850033, 0.146722225601560, 0.146466672444110, 0.146405887358897, 0.146258673920675, 0.145963254364621, 0.145622423354011, 0.145339025801499, 0.145166035446571, 0.145091190077044, 0.145076610549712, 0.145046869494430, 0.145013441145812, 0.145031059287159, 0.145122693718924, 0.145258113025355, 0.145370201249865, 0.145401152911124, 0.145483958776061, 0.145690749986535, 0.146027045469136, 0.146454953872990, 0.146877472559626, 0.147169057362541, 0.147243986859955, 0.147435614933389, 0.147872050648910, 0.148498418256982, 0.149202527417725, 0.149829343163504, 0.150231815805790, 0.150331818178103, 0.150581727705247, 0.151122238895418, 0.151836674347217, 0.152563582838459, 0.153147706915333, 0.153492023515151, 0.153573801909993, 0.153771472825815, 0.154165080208084, 0.154607386225455, 0.154948347454139, 0.155118070481058, 0.155159340368973, 0.155161074977957]),
    1.0e+00 * np.array([0.003835980561399, 0.003877507831287, 0.004236068238603, 0.005227760466176, 0.006803306228413, 0.008486786206321, 0.009669681471912, 0.009973752417437, 0.010568916718391, 0.011926014667546, 0.013899389089390, 0.016221859604004, 0.018525030101999, 0.020416557738787, 0.021573573930875, 0.021855067252005, 0.022766337615468, 0.024703217151321, 0.027181585895820, 0.029593517904026, 0.031440850798552, 0.032487666354701, 0.032731367673621, 0.033312224377086, 0.034432062845508, 0.035624873401552, 0.036487989354998, 0.036897411051419, 0.037000992877061, 0.037008444816172, 0.036996123180856, 0.036821718185890, 0.036286358985300, 0.035376287691214, 0.034350456004249, 0.033599698468512, 0.033402336235516, 0.032890330008872, 0.031688871915116, 0.029888171235534, 0.027763361975829, 0.025777961614205, 0.024454939723891, 0.024120953508502, 0.023277329742740, 0.021412848147254, 0.018871103153396, 0.016195419682188, 0.013969927713673, 0.012617393300276, 0.012290567080299, 0.011489916147933, 0.009837397186486, 0.007822805015496, 0.005981673412656, 0.004668560775373, 0.003971981125364, 0.003815784048179, 0.003453996142600, 0.002807211961267, 0.002227321719555, 0.001951067526383, 0.001959313252618, 0.002063150907571, 0.002098965256514, 0.002203738677376, 0.002492459278146, 0.002957122260716, 0.003438194520291, 0.003733818949667, 0.003815696071926, 0.003819358953833]), 
    1.0e+03 * np.array([5.000000000000000, 3.208751200131503,-0.149230585094763,-3.610452967432361,-6.095747870059317,-7.364729033122332,-7.798352402596183,-7.864810683492053,-7.948765718455782,-7.986824542862753,-7.926297477138792,-7.723831782167430,-7.407800268990837,-7.012471389752500,-6.676641810355174,-6.583765319936303,-6.255135632818385,-5.418202658441867,-4.078486879884173,-2.470617776990985,-1.002526593667419,-0.056626511306455, 0.177927462463263, 0.762432688437653, 2.014382913862536, 3.630490292892053, 5.210919459989909, 6.418843850794657, 7.098019005293948, 7.255109365814139, 7.627315651469745, 8.330885767712498, 9.039186317543914, 9.469506602750783, 9.574850698010220, 9.565966404285025, 9.560545171521328, 9.541748700512969, 9.476298461088335, 9.338514034167336, 9.132257362059720, 8.905894536235293, 8.681860083560689, 8.612105605590381, 8.413630781417350, 7.867737596145261, 6.906428842821211, 5.641152219351154, 4.391766191987566, 3.540872363571280, 3.324299714786454, 2.774846594022844, 1.549955346236200,-0.134378194691415,-1.909332435308215,-3.369677932501390,-4.240575780670103,-4.448175490899596,-4.950728246764597,-5.951776071981125,-7.065164626947462,-7.886147634499374,-8.235187423866110,-8.262289346041007,-8.244044185776133,-8.153246753594610,-7.722956917305938,-6.599683271815500,-4.656739621603665,-2.315846647880963,-0.493564032269260,0]), 
    1.0e+03 * np.array([5.000000000000000, 5.232843564214444, 5.641894875262724, 5.998072594782672, 6.152961911248690, 6.118684408034658, 6.023518224580723, 5.991636599511863, 5.921144501261045, 5.757821442445329, 5.652847750737933, 5.685360328110239, 5.844291464591169, 6.003410079127388, 6.078743959533609, 6.093781883797155, 6.134820540660194, 6.183171487997896, 6.169112926006734, 6.068191940560807, 5.921033409159021, 5.802791331986927, 5.770759995091405, 5.686266138128877, 5.482305989379939, 5.168011726055155, 4.790890659712352, 4.436185917205782, 4.198862666283627, 4.138670218625596, 3.986009404692969, 3.643880645752854, 3.162396449714720, 2.627100353605587, 2.153237342801295, 1.859853587531754, 1.789132159491085, 1.615580060156065, 1.252494060313839, 0.787260724598182, 0.311671099546602,-0.089071372263014,-0.340998611043922,-0.403116421189918,-0.557493574566737,-0.887845369775227,-1.318557925208366,-1.752051582450103,-2.098845514279904,-2.303568210502119,-2.352320936664494,-2.470507877168365,-2.708280261418460,-2.984039637096879,-3.215308490613024,-3.358394834795600,-3.420545080955773,-3.432410010799246,-3.455795793789032,-3.475133027812034,-3.430796504958060,-3.291291558255276,-3.092056865584706,-2.926799787557523,-2.881085827981749,-2.758497615034899,-2.450481383470314,-1.942408097933565,-1.279931447392561,-0.604845176803566,-0.125205323006223,0]), 
    1.0e+03 * np.array([5.000000000000000, 4.413847499401663, 3.217308521164658, 1.775072803334387, 0.460645950935849,-0.486262753182283,-0.997748904796027,-1.113939125756874,-1.325583186295514,-1.748750104849009,-2.284539687172775,-2.831801813432999,-3.311910836578176,-3.643020964612965,-3.801334320382791,-3.834428813957643,-3.927999726347213,-4.058034432511275,-4.086519628150595,-3.952130538636110,-3.718495757406473,-3.521475893466068,-3.467355588306760,-3.323586554182306,-2.973061256476290,-2.431277024989545,-1.789562924597603,-1.202312743210266,-0.821100171645217,-0.726103876636181,-0.488436891360150, 0.025711966772341, 0.702254988764499, 1.381687583143663, 1.919844768825971, 2.243486650523972, 2.322673281740848, 2.518915186271481, 2.937860965113139, 3.488893397372008, 4.062602312840259, 4.547208989293229, 4.821064017046488, 4.882316642805395, 5.023439571876315, 5.270575058167326, 5.475773184484637, 5.536654671874139, 5.464827765279340, 5.363227989076294, 5.331643594967291, 5.242012440255995, 4.997231839470107, 4.569240978349243, 4.009922091736384, 3.462198567987005, 3.092276523447478, 2.998587227416737, 2.761836547360108, 2.239652734390749, 1.537900467973758, 0.827886980670366, 0.278623567181245,-0.026230235181511,-0.095536532323430,-0.256653781935707,-0.540097022718086,-0.751171425894850,-0.713696596277311,-0.423403925903489,-0.098676775132372,0]),
    ])
# phase.guess.state_variables = np.array([
#   [omega_x_t0, omega_x_t0], 
#   [omega_y_t0, omega_y_t0], 
#   [omega_z_t0, omega_z_t0], 
#   [r_x_t0, r_x_t0], 
#   [r_y_t0, r_y_t0], 
#   [r_z_t0, r_z_t0], 
#   [h_x_t0, h_x_t0], 
#   [h_y_t0, h_y_t0], 
#   [h_z_t0, h_z_t0],
#   ])
# phase.guess.state_variables = {
#   omega_x: [omega_x_t0, omega_x_t0],
#   omega_y: [omega_y_t0, omega_y_t0],
#   omega_z: [omega_z_t0, omega_z_t0],
#   r_x: [r_x_t0, r_x_t0],
#   r_y: [r_y_t0, r_y_t0],
#   r_z: [r_z_t0, r_z_t0],
#   h_x: [h_x_t0, h_x_t0],
#   h_y: [h_y_t0, h_y_t0],
#   h_z: [h_z_t0, h_z_t0],
# }
phase.guess.control_variables = np.array([
    1.0e+02 * np.array([-1.420648496735927, -1.304264826153713, -1.064018387034210, -0.766964619153719, -0.483740552274294, -0.266309326766969, -0.140812718293093, -0.125436155261660, -0.050022177608669,  0.002617300734447,  0.037523104295203,  0.076047223449182,  0.116204585485313,  0.179387137905621,  0.224610259522220,  0.234303951345889,  0.265075598346623,  0.322549456421865,  0.381013808869047,  0.421367529517698,  0.439779453057760,  0.444303794125390,  0.444618559010791,  0.444061373746980,  0.436557303975319,  0.413932588868116,  0.375883540085413,  0.333096839373891,  0.301784414282354,  0.291438075134012,  0.273224081191020,  0.221835720043173,  0.150699279963756,  0.063693695970080,  0.004399370801427, -0.009644230850533, -0.007081670732853, -0.019033332111991, -0.027109170856225, -0.045916164016393, -0.056100607948511, -0.084748423410617, -0.126785510444020, -0.137410569086344, -0.164327818959139, -0.219575045732709, -0.286228540966161, -0.346017508772991, -0.387263589267688, -0.408133091796424, -0.412648023759658, -0.422763374608669, -0.438861577245980, -0.447387722919323, -0.439196092221678, -0.417416101497832, -0.396416165997605, -0.390340384480392, -0.373637875014863, -0.329838714641698, -0.254399361927806, -0.153324405573393, -0.049178254810580,  0.024942722610841,  0.044276192315892,  0.094248520067107,  0.210901717254849,  0.385418108765918,  0.592358540306833,  0.787356637209718,  0.918638527460469,  0.952016415561766]),
    1.0e+00 * np.array([18.778913128994141, 16.644234343586746, 12.213320184581313,  6.645457200067598,  1.184842251213597, -3.152797208454519, -5.731623254665670, -5.329300949374241, -7.917273058675520, -5.855019705452416, -1.175864942792344,  3.014361166208046,  5.949250625118707,  5.232396959625485,  3.854455203756723,  3.589932219239053,  2.658291695541591,  0.777314406331963, -1.470749481544851, -3.539146768271083, -5.085313118271925, -5.966035491724996, -6.173401739922380, -6.673757117193953, -7.679313376415336, -8.880642582929216, -9.998097544505473,-10.851162456634199,-11.347438024296158,-11.520952570829960,-11.728736109426892,-12.362993726495059,-13.032788068945848,-13.789022835151721,-13.920812808512814,-13.472312155724223,-13.326577114613318,-13.066110782801577,-12.534179369858935,-12.061038866342354,-11.814109183868728,-11.780581036661454,-11.779247931274426,-11.761723720460211,-11.714737047813596,-11.542794230239075,-11.154124170509728,-10.536345611166462, -9.834122313863325, -9.308376462539329, -9.168552823931725, -8.802843656040309, -7.929726939269025, -6.588775366416282, -4.967592282782998, -3.424309043983234, -2.381132798133187, -2.115201812165369, -1.438256496996753,  0.091274727190631,  2.275009154364397,  4.746588801761818,  6.994088496713684,  8.476069969527799,  8.850376188479110,  9.798131324167640, 11.919839019510592, 14.924684258304890, 18.320750801616413, 21.419039996301869, 23.468172224432443, 23.985352086032954]),
    1.0e+00 * np.array([-45.317800333199401, -43.824198033819187, -40.438884467770123, -35.612142748974705, -30.222677959563576, -25.451112343605281, -22.397261753992858, -21.915058156658660, -20.059598529188616, -18.135077342994133, -16.432530117697613, -14.930626242812153, -13.400227009539256, -10.656887214344597,  -8.427953699622698,  -7.939132716378476,  -6.298800316452986,  -2.894851862379423,   1.326996046936975,   5.329407114833749,   8.350748439375083,  10.056492611677166,  10.453865387887866,  11.402600018069771,  13.245385960461439,  15.257360082178577,  16.807714081060364,  17.661126354011472,  17.975619087820451,  17.992504412796269,  18.124144174327984,  18.051416633552133,  17.560719484554848,  16.394015264561762,  15.326407240135085,  15.016848336932267,  15.175173860159269,  14.783094738696755,  14.731512618506143,  14.347207386571384,  14.481385541035344,  13.642816829374887,  11.855399057753370,  11.364693185529003,  10.096151205266825,   7.304888159003171,   3.517635069499479,  -0.455149728837405,  -3.749251077586621,  -5.744433127107685,  -6.225426029518015,  -7.401312168074468,  -9.812831680410032, -12.701872288730765, -15.235445492274415, -16.897821281747426, -17.674614111875425, -17.831876363646490, -18.161388863113459, -18.552217744977753, -18.329454002405750, -17.072656502957845, -15.086895065144423, -13.372431367526035, -12.891196005408100, -11.589039552521573,  -8.259794215829496,  -2.649145185802923,   4.800719977552013,  12.485713824708368,  17.982872309561884,  19.413466022248709]),
    ])
# phase.guess.control_variables = np.array([[0, 0], [0, 0], [0, 0]])
# phase.guess.control_variables = {
#   u_x: [0, 0],
#   u_y: [0, 0],
#   u_z: [0, 0],
# }
phase.guess.integral_variables = np.array([3.586833318643251])
# phase.guess.integral_variables = np.array([10])

problem.objective_function = phase.integral_variables[0]

problem.endpoint_constraints = [
    domega_x_dt_tF,
    domega_y_dt_tF,
    domega_z_dt_tF,
    dr_x_dt_tF,
    dr_y_dt_tF,
    dr_z_dt_tF,
]


# Utility functions
def skew_symmetric_cross_product_operator(vec):
    if vec.shape != (3, 1):
        raise ValueError(f"Vector must be a column vector and have shape "
                         f"(3, 1) but is {vec.shape}")
    skew_symmetric_cross_product_operator = sym.Matrix([
        [0, -vec[2], vec[1]],
        [vec[2], 0, -vec[0]],
        [-vec[1], vec[0], 0]])
    return skew_symmetric_cross_product_operator


def row_vec_dot_col_vec(vec_1, vec_2):
    if vec_1.shape != (3, 1):
        raise ValueError(f"First vector must be a column vector and have "
                         f"shape (3, 1) but is {vec_1.shape}")
    if vec_2.shape != (1, 3):
        raise ValueError(f"Second vector must be a row vector and have shape "
                         f"(1, 3) but is {vec_2.shape}")
    matrix = sym.Matrix([[vec_1[0, 0] * vec_2[0, 0],
                          vec_1[0, 0] * vec_2[0, 1],
                          vec_1[0, 0] * vec_2[0, 2]],
                         [vec_1[1, 0] * vec_2[0, 0],
                          vec_1[1, 0] * vec_2[0, 1],
                          vec_1[1, 0] * vec_2[0, 2]],
                         [vec_1[2, 0] * vec_2[0, 0],
                          vec_1[2, 0] * vec_2[0, 1],
                          vec_1[2, 0] * vec_2[0, 2]]])
    return matrix


def col_vec_dot_row_vec(vec_1, vec_2):
    if vec_1.shape != (1, 3):
        raise ValueError(f"First vector must be a row vector and have shape "
                         f"(1, 3) but is {vec_1.shape}")
    if vec_2.shape != (3, 1):
        raise ValueError(f"Second vector must be a column vector and have "
                         f"shape (3, 1) but is {vec_2.shape}")
    return vec_1.dot(vec_2)


J = sym.Matrix([
    [J_00, J_01, J_02],
    [J_10, J_11, J_12],
    [J_20, J_21, J_22]])
J_inv = sym.Matrix([
    [J_inv_00, J_inv_01, J_inv_02],
    [J_inv_10, J_inv_11, J_inv_12],
    [J_inv_20, J_inv_21, J_inv_22]])

# Continuous vectors
omega = sym.Matrix([omega_x, omega_y, omega_z])
r = sym.Matrix([r_x, r_y, r_z])
h = sym.Matrix([h_x, h_y, h_z])
u = sym.Matrix([u_x, u_y, u_z])

# Calculating domega/dt
r_skew_symmetric = skew_symmetric_cross_product_operator(r)
I = sym.eye(3)
D = 2 / (1 + col_vec_dot_row_vec(r.T, r))
E = (r_skew_symmetric * r_skew_symmetric) - r_skew_symmetric
C = I + (D * E)
C_2_skew = skew_symmetric_cross_product_operator(C[:, 2])
tau_gg = 3 * omega_orb**2 * C_2_skew * (J * C[:, 2])
A = J * omega + h
B = skew_symmetric_cross_product_operator(omega) * A
K = tau_gg - B - u
domega_dt = J_inv * K

# Calculating dr/dt
omega_0 = - omega_orb * C[:, 1]
r_sqrd = row_vec_dot_col_vec(r, r.T)
dr_dt = 0.5 * (r_sqrd + I + r_skew_symmetric) * (omega - omega_0)

# Endpoint equations
omega_tF = sym.Matrix(phase.final_state_variables[:3])
r_tF = sym.Matrix(phase.final_state_variables[3:6])
h_tF = sym.Matrix(phase.final_state_variables[6:])

# Calculating domega(tF)/dt
r_tF_skew_symmetric = skew_symmetric_cross_product_operator(r_tF)
D_tF = 2 / (1 + col_vec_dot_row_vec(r_tF.T, r_tF))
E_tF = (r_tF_skew_symmetric * r_tF_skew_symmetric) - r_tF_skew_symmetric
C_tF = I + (D_tF * E_tF)
C_tF_2_skew = skew_symmetric_cross_product_operator(C_tF[:, 2])
tau_gg_tF = 3 * omega_orb**2 * C_tF_2_skew * J * C_tF[:, 2]
A_tF = J * omega_tF + h_tF
B_tF = skew_symmetric_cross_product_operator(omega_tF) * A_tF
K_tF = tau_gg_tF - B_tF
domega_dt_tF = J_inv * K_tF

# Calculating dr(tF)/dt
omega_0_tF = - omega_orb * C_tF[:, 1]
r_tF_sqrd = row_vec_dot_col_vec(r_tF, r_tF.T)
omega_tF_diff = (omega_tF - omega_0_tF)
dr_dt_tF = 0.5 * (r_tF_sqrd + I + r_tF_skew_symmetric) * omega_tF_diff

problem.auxiliary_data = {
    J_00: 2.80701911616e8,
    J_01: 4.822509936e6,
    J_02: -1.71675094448e8,
    J_10: 4.822509936e6,
    J_11: 9.5144639344e8,
    J_12: 6.02604448e5,
    J_20: -1.71675094448e8,
    J_21: 6.02604448e5,
    J_22: 7.6594401336e8,
    J_inv_00: J.inv()[0, 0],
    J_inv_01: J.inv()[0, 1],
    J_inv_02: J.inv()[0, 2],
    J_inv_10: J.inv()[1, 0],
    J_inv_11: J.inv()[1, 1],
    J_inv_12: J.inv()[1, 2],
    J_inv_20: J.inv()[2, 0],
    J_inv_21: J.inv()[2, 1],
    J_inv_22: J.inv()[2, 2],
    omega_orb: 0.06511 * np.pi / 180,
    h_max: 15000,
    u_inner_prod_squared: u_x**2 + u_y**2 + u_z**2,
    h_inner_prod_squared: h_x**2 + h_y**2 + h_z**2,
    domega_x_dt: domega_dt[0, 0],
    domega_y_dt: domega_dt[1, 0],
    domega_z_dt: domega_dt[2, 0],
    dr_x_dt: dr_dt[0, 0],
    dr_y_dt: dr_dt[1, 0],
    dr_z_dt: dr_dt[2, 0],
    dh_x_dt: u_x,
    dh_y_dt: u_y,
    dh_z_dt: u_z,
    domega_x_dt_tF: domega_dt_tF[0, 0],
    domega_y_dt_tF: domega_dt_tF[1, 0],
    domega_z_dt_tF: domega_dt_tF[2, 0],
    dr_x_dt_tF: dr_dt_tF[0, 0],
    dr_y_dt_tF: dr_dt_tF[1, 0],
    dr_z_dt_tF: dr_dt_tF[2, 0],
}

# problem.settings.display_mesh_result_graph = True
# problem.settings.derivative_level = 2
# problem.settings.scaling_method = None
# problem.settings.collocation_points_min = 4

# phase.mesh.number_mesh_sections = 10
# phase.mesh.number_mesh_section_nodes = 4
# problem.settings.quadrature_method = "lobatto"
# phase.mesh.number_mesh_section_nodes = [3, 2, 3, 3]
# phase.mesh.mesh_section_sizes = None

# problem.settings.check_nlp_functions = True
# problem.settings.dump_nlp_check_json = "pycollo"

problem.initialise()
problem.solve()


